<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" creationComplete="getEnergies.send();">
	<fx:Metadata>
		[ResourceBundle("resources")]
	</fx:Metadata>
	
	<fx:Declarations>
		<fx:Array id="hashTags" />
		<s:HTTPService url="{resourceManager.getString('resources', 'TWEET_SERVER_URL') + '/energySources'}" 
					   method="GET" headers="{'pragma', 'no-cache'}" result="getEnergies_resultHandler(event)" fault="getEnergies_faultHandler(event)" resultFormat="text" id="getEnergies" showBusyCursor="true" />
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			import com.seesmic.as3.xmpp.JID;
			import com.seesmic.as3.xmpp.XMPP;
			import com.seesmic.as3.xmpp.XMPPEvent;
			import com.seesmic.as3.xmpp.xep.muc.MUC;
			
			import listeners.HashCreatorEvent;
			
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			private var conn:XMPP;
			
			private final function handleSession(e:XMPPEvent):void {
				outputArea.text =  "Agent successfully connected to Openfire. Now listening...";
				
				conn.addEventListener(XMPPEvent.MESSAGE_MUC, handleMUCMessage);
				conn.plugin['muc'].joinRoom('conference.'+resourceManager.getString('resources', 'XMPP_SERVER'), resourceManager.getString('resources', 'TWEETS_ROOM_NAME'), resourceManager.getString('resources', 'TWEET_AGENT'));
				conn.plugin['muc'].joinRoom('conference.'+resourceManager.getString('resources', 'XMPP_SERVER'), resourceManager.getString('resources', 'TWEETS_COMMUNICATION_ROOM_NAME'), resourceManager.getString('resources', 'TWEET_AGENT'));
			}
			
			private function handleMUCMessage(e:XMPPEvent):void {
				if(!e.stanza.body) {
					return;
				}
				
				switch(new String(e.stanza.from.user)) {
					case resourceManager.getString('resources', 'TWEETS_ROOM_NAME'):
						//extract some variables from the XMPP message
						var roomjid:JID = JID(e.stanza.from);
						var mess:String = "Message: from "+ e.stanza.from + "\n**********************";
						
						var cstate:String = null;
						var newMess:Boolean = true;
						
						//check whether the message is "old" or is of type "system"
						if(roomjid.getResource() != "") {
							var xm:XML = e.stanza.xml as XML;
							for each (var i:XML in xm.elements()) {
								if(i.name() == "urn:xmpp:delay::delay") {
									newMess = false;
								}
							}
						}
						else {
							cstate = "system";
						}
						
						if(cstate != "system" && newMess) {
							var hc:HashCreator = new HashCreator();
							hc.addEventListener(HashCreatorEvent.POST_SUCCESSFUL, handlePostSuccessful);
							hc.addEventListener(HashCreatorEvent.POST_FAILED, handlePostFailure);
							hc.addEventListener(HashCreatorEvent.NO_HASH_FOUND, handleNoPost);
							hc.postHashToService(new String(e.stanza.body), new String(e.stanza.from.resource), resourceManager.getString('resources', 'TWEET_SERVER_URL')+"/tweet", hashTags);
						}
						break;
					
					case resourceManager.getString('resources', 'TWEETS_COMMUNICATION_ROOM_NAME'):
						
						break;
				}
			}
			
			/**
			 *
			 * Called when the tweetUpdater is successful
			 * 
			 **/
			protected function handlePostSuccessful(evt:HashCreatorEvent):void {
				//we're happy, it worked
				var res:Object = com.adobe.serialization.json.JSON.decode(new String(evt.result));
				conn.plugin['muc'].sendMessage('conference.'+resourceManager.getString('resources', 'XMPP_SERVER'), resourceManager.getString('resources', 'TWEETS_COMMUNICATION_ROOM_NAME'), '{"tag":"'+res.tag+'", "messageType":"'+resourceManager.getString('resources', 'TWEET_POST_SUCCESSFUL')+'"}', null);
			}
			
			
			/**
			 *
			 * Called when the tweetUpdater fails
			 * 
			 **/
			protected function handlePostFailure(evt:HashCreatorEvent):void {
				//it went tits up, what do we do?
			}
			
			/**
			 *
			 * Called when the tweetUpdater fails
			 * 
			 **/
			protected function handleNoPost(evt:HashCreatorEvent):void {
				//no valid hash tag found
			}
			
			/**
			 * 
			 * Fault Event handler for get energies
			 * 
			 **/
			protected function getEnergies_faultHandler(event:FaultEvent):void {
				trace("An error occurred ");
			}
			
			/**
			 * 
			 * Event handler for get energies
			 * 
			 **/
			protected function getEnergies_resultHandler(event:ResultEvent):void {
				var res:Object = com.adobe.serialization.json.JSON.decode(String(event.result));
				hashTags = new Array();
				for each (var nrj:Object in res) {
					hashTags.push("#"+nrj.energy);
				}
				
				conn = new XMPP();
				conn.auto_reconnect = true;
				conn.setJID(resourceManager.getString('resources', 'TWEET_AGENT')+"@"+resourceManager.getString('resources', 'XMPP_SERVER')+"/"+resourceManager.getString('resources', 'TWEET_AGENT'));
				conn.setPassword(resourceManager.getString('resources', 'XMPP_CLIENT_DEFAULT_PASSWORD'));
				conn.setServer(resourceManager.getString('resources', 'XMPP_SERVER'));
				conn.addEventListener(XMPPEvent.SESSION, handleSession);
				
				conn.addPlugin(new MUC());
				conn.connect();
			}
		]]>
	</fx:Script>
	
	<s:TextArea top="10" left="10" right="10" bottom="10" id="outputArea" />

</s:WindowedApplication>
